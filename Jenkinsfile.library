@Library('my-shared-library') _
import com.example.CustomUtils

pipeline {
    agent any

    environment {
        CUSTOM_IMAGE_NAME = "cloudsheger/simple-java-app:${env.BUILD_NUMBER}"
        DOCKER_PORT = "8082"
        LOCAL_JAR_PATH = "/var/lib/jenkins/workspace/petclinic-artifactory/target/spring-petclinic-2.7.0-SNAPSHOT.jar"
        ARTIFACTORY_URL = "http://3.88.183.25:8081/artifactory/cloudsheger-general-repo/app/petclinic.jar"
        ARTIFACTORY_API_KEY = credentials(jfrog_api_key)
    }

    stages {
        stage('Build') {
            steps {
                sh 'mvn -Dmaven.test.failure.ignore=true -Dcheckstyle.skip clean package'
                archiveArtifacts artifacts: 'target/*.jar', allowEmptyArchive: true
            }
        }
        stage('docker build') {
            steps {
                script {
                    // Call the buildDocker() function from your shared library
                    buildDocker(env.CUSTOM_IMAGE_NAME)
                }
            }
        }

        stage('scan Docker image') {
            steps {
                script {
                    // Call the scanDockerImage() function from your shared library
                  scanDockerImage(env.CUSTOM_IMAGE_NAME)
                }
            }
        }
        stage('Upload to Artifactory') {
                steps {
                    script {
                      // Call the uploadToArtifactory() function from your shared library
                    uploadToArtifactory(env.LOCAL_JAR_PATH, env.ARTIFACTORY_URL, env.ARTIFACTORY_API_KEY)

                    }
                }
          }
            

        stage('deploy Docker image') {
            steps {
                script {
                    // Call the deployDockerImage() function from your shared library
                    deployDockerImage(env.CUSTOM_IMAGE_NAME, env.DOCKER_PORT)
                }
            }
        }

        stage('cleanup Docker images') {
            steps {
                script {
                    // Call the cleanupDockerImages() function from your shared library
                    CustomUtils.cleanupDockerImages()
                }
            }
        }
    }
}
